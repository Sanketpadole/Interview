package concept;

public class ExceptionHandling {

//	Exception Handling is a mechanism to handle runtime errors such as ClassNotFoundException, , SQLExcepIOExceptiontion, RemoteException, etc.

}

//
//Advantage of Exception Handling
//The core advantage of exception handling is to maintain the normal flow of the application.
//An exception normally disrupts the normal flow of the application; that is why we need to handle exceptions. Let's consider a scenario:
//
//statement 1;
//statement 2;
//statement 3;
//statement 4;
//statement 5;//exception occurs
//statement 6;
//statement 7;
//statement 8;
//statement 9;
//statement 10;
//Suppose there are 10 statements in a Java program and an exception occurs at statement 5;
//the rest of the code will not be executed, i.e., statements 6 to 10 will not be executed. However, when we perform exception handling,
//the rest of the statements will be executed. That is why we use exception handling in Java.

//
//Keyword	Description
//try	The "try" keyword is used to specify a block where we should place an exception code. It means we can't use try block alone. The try block must be followed by either catch or finally.
//catch	The "catch" block is used to handle the exception. It must be preceded by try block which means we can't use catch block alone. It can be followed by finally block later.
//finally	The "finally" block is used to execute the necessary code of the program. It is executed whether an exception is handled or not.
//throw	The "throw" keyword is used to throw an exception.
//throws	The "throws" keyword is used to declare exceptions. It specifies that there may occur an exception in the method. It doesn't throw an exception.
//It is always used with method signature.

//
//The runtime errors are the errors that occur during the execution and after compilation. The examples of runtime errors are division by zero, etc.
//These errors are not easy to detect as the compiler does not point to these errors.
//
//Let's look at the differences between compile-time and runtime:
//
//Compile-time	Runtime
//The compile-time errors are the errors which are produced at the compile-time, and they are detected by the compiler.
//The runtime errors are the errors which are not generated by the compiler and produce an unpredictable result at the execution time.
//In this case, the compiler prevents the code from execution if it detects an error in the program.
//In this case, the compiler does not detect the error, so it cannot prevent the code from the execution.
//It contains the syntax and semantic errors such as missing semicolon at the end of the statement.
//It contains the errors such as division by zero, determining the square root of a negative number.
